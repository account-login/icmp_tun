// +build !noasm
// Generated by PeachPy 0.2.0 from checksum_amd64.py


// func sum16b32(b *uint16, n int64) uint32
TEXT Â·sum16b32(SB),4,$0-20
	MOVQ b+0(FP), AX
	MOVQ n+8(FP), BX
	PXOR X0, X0
	PXOR X1, X1
	PXOR X2, X2
	PXOR X3, X3
	SUBQ $32, BX
	JCS vector_loop_end
vector_loop_begin:
		BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x33; BYTE $0x20 // PMOVZXWD xmm4, qword [rax]
		BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x33; BYTE $0x68; BYTE $0x08 // PMOVZXWD xmm5, qword [rax + 8]
		BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x33; BYTE $0x70; BYTE $0x10 // PMOVZXWD xmm6, qword [rax + 16]
		BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x33; BYTE $0x78; BYTE $0x18 // PMOVZXWD xmm7, qword [rax + 24]
		PADDL X4, X0
		PADDL X5, X1
		PADDL X6, X2
		PADDL X7, X3
		ADDQ $32, AX
		SUBQ $32, BX
		JCC vector_loop_begin
vector_loop_end:
	PADDL X1, X0
	PADDL X2, X0
	PADDL X3, X0
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x02; BYTE $0xC0 // PHADDD xmm0, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x38; BYTE $0x02; BYTE $0xC0 // PHADDD xmm0, xmm0
	BYTE $0x66; BYTE $0x0F; BYTE $0x7E; BYTE $0xC1 // MOVD ecx, xmm0
	ADDQ $32, BX
scalar_loop_begin:
		SUBQ $2, BX
		JCS scalar_loop_end
		MOVWLZX 0(AX), DX
		ADDL DX, CX
		ADDQ $2, AX
		JMP scalar_loop_begin
scalar_loop_end:
	ADDQ $1, BX
		JNE odd_end
		MOVBLZX 0(AX), DX
		ADDL DX, CX
odd_end:
	MOVL CX, ret+16(FP)
	RET
