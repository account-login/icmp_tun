package icmp_tun

import (
	"github.com/stretchr/testify/assert"
	"math/rand"
	"testing"
)

func TestSplitMix64_XORKeyStream_Short(t *testing.T) {
	expected := [...][]byte{
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xdf, 0xa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x26, 0x55, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xb9, 0xdf, 0xf6, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xf9, 0x96, 0x60, 0x48, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x11, 0x57, 0x99, 0x9c, 0x50, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x27, 0xa8, 0x89, 0x3b, 0x1d, 0xb9, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xa9, 0xd6, 0xde, 0xf2, 0xd1, 0xd4, 0xb2, 0x5b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xed, 0xe3, 0x1e, 0xbb, 0x67, 0x2, 0x55, 0xba, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xc0, 0xe0, 0x9a, 0x3b, 0xc0, 0xfe, 0x8f, 0x24, 0xd1, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x20, 0xdc, 0xa4, 0x61, 0x1a, 0xa, 0x10, 0x5b, 0x23, 0x54, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x7e, 0x96, 0x8b, 0x12, 0x0, 0xf0, 0xa3, 0xd9, 0x6b, 0x73, 0xe4, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x9e, 0xf7, 0x88, 0x23, 0x3d, 0xb8, 0xcf, 0xcc, 0x67, 0xd7, 0x16, 0x3a, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xac, 0xbd, 0x36, 0xb5, 0xdc, 0x35, 0x33, 0xe0, 0x19, 0x86, 0x4d, 0xd7, 0xd4, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xb0, 0xf7, 0x89, 0x86, 0xae, 0xf6, 0xe8, 0x84, 0x4e, 0xbd, 0x1b, 0xae, 0x4, 0x2b, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x54, 0x3c, 0x32, 0xb6, 0xcd, 0xc6, 0x3c, 0xfe, 0x77, 0x96, 0xf8, 0xb, 0xf2, 0x70, 0x2b, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x35, 0xeb, 0xd9, 0x26, 0x6f, 0x1a, 0x23, 0x7f, 0x5a, 0xc4, 0x92, 0x8e, 0xd7, 0x4a, 0x12, 0x2e, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x7f, 0xdc, 0x4d, 0x95, 0x41, 0xc4, 0xb0, 0x5d, 0x5a, 0xe, 0xa2, 0x9b, 0xdf, 0x85, 0x62, 0x3d, 0xb7, 0xba, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xaf, 0xc6, 0x6e, 0xd0, 0xc1, 0xb8, 0x9a, 0xfa, 0xb6, 0x12, 0x1a, 0x9d, 0x29, 0x9a, 0x8, 0x41, 0x2f, 0x7f, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x46, 0x7e, 0x20, 0x88, 0x22, 0x1f, 0xa4, 0x9c, 0xf2, 0x1, 0x85, 0x98, 0x71, 0x5f, 0x66, 0x6e, 0x30, 0x8d, 0xc8, 0x35, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x35, 0xbb, 0xda, 0xd6, 0xe3, 0x79, 0x17, 0xb7, 0x86, 0x54, 0x92, 0x44, 0x1d, 0xab, 0xf4, 0xb3, 0xbd, 0x35, 0x21, 0xd8, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x54, 0xd1, 0xba, 0x2c, 0xc3, 0xab, 0x8b, 0xb7, 0x15, 0x8a, 0xdd, 0x8, 0x61, 0xe5, 0xfd, 0xd2, 0x93, 0x38, 0x89, 0x6, 0xec, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x1a, 0xd1, 0x40, 0xe8, 0x84, 0xfc, 0x72, 0x95, 0xaf, 0xdf, 0x51, 0x6, 0xd, 0x96, 0xca, 0x44, 0x30, 0x4a, 0x73, 0xb0, 0x3a, 0x6, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x88, 0x69, 0x9a, 0xe4, 0xab, 0x12, 0xc9, 0xe2, 0x7, 0xc2, 0xbf, 0xc7, 0x46, 0x26, 0x15, 0xa6, 0x48, 0x12, 0x2d, 0x1, 0x44, 0x2a, 0x30, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xce, 0x72, 0xbd, 0x66, 0x51, 0xfd, 0xe, 0x95, 0xd8, 0x18, 0x4a, 0xa1, 0x1f, 0xae, 0xf0, 0xe1, 0x70, 0x4b, 0x4a, 0x40, 0x14, 0xff, 0xe9, 0x23, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xc1, 0x8c, 0xee, 0xb5, 0xcb, 0x9, 0x8, 0x7a, 0x12, 0x8f, 0x89, 0xfa, 0x76, 0xd7, 0x6f, 0xfa, 0xdd, 0x69, 0xb3, 0x4f, 0x10, 0x30, 0x36, 0xa7, 0xea, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xdf, 0xe, 0xe6, 0x4, 0x67, 0x85, 0x90, 0xc, 0x56, 0x22, 0x4d, 0xf0, 0xf4, 0x5d, 0x7a, 0xa2, 0x9a, 0xea, 0x60, 0xf, 0x71, 0x28, 0x79, 0x16, 0x73, 0xe8, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xd1, 0x25, 0xaf, 0x28, 0xca, 0x51, 0x9f, 0xca, 0x3a, 0x62, 0x20, 0x5f, 0xc3, 0xf4, 0xeb, 0xa7, 0xf0, 0x80, 0xe3, 0x4b, 0x7a, 0x2a, 0x14, 0x12, 0xdb, 0xba, 0xee, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x6, 0x68, 0x85, 0xf, 0x14, 0x25, 0xf8, 0xd5, 0xe3, 0xfa, 0xff, 0xb8, 0x5d, 0x98, 0x4c, 0xf8, 0xab, 0x30, 0x15, 0xc7, 0xd2, 0x44, 0x28, 0xd1, 0xdc, 0x59, 0x1e, 0xe7, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xfd, 0x49, 0xa, 0xa4, 0x70, 0xa1, 0xb4, 0xb5, 0x5b, 0x32, 0x2, 0x44, 0xfd, 0xbe, 0x27, 0xc4, 0x16, 0x6c, 0x7a, 0x7, 0xcc, 0xbc, 0x7a, 0x1d, 0x9d, 0x47, 0xe, 0x98, 0x91, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x82, 0xcf, 0x82, 0x7d, 0xb7, 0xf3, 0xda, 0xc6, 0xb1, 0x82, 0xed, 0x28, 0xa, 0x7c, 0xb5, 0xd1, 0x96, 0x5e, 0xa4, 0x41, 0x9c, 0x9d, 0xdc, 0x7d, 0xa3, 0x9, 0xa0, 0x61, 0x25, 0x72, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0x66, 0x84, 0x6d, 0x38, 0x1f, 0x87, 0xf1, 0x41, 0x8e, 0x3a, 0x8c, 0x84, 0xea, 0x29, 0xb9, 0x17, 0x35, 0x39, 0x37, 0x4a, 0x6c, 0x95, 0xc3, 0xc7, 0x47, 0xfb, 0x61, 0x4d, 0x7c, 0x70, 0x1a, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xe3, 0x31, 0x80, 0x76, 0x76, 0x16, 0x92, 0x49, 0x4a, 0x9c, 0x7, 0xd7, 0x11, 0x0, 0x50, 0x40, 0x43, 0x97, 0x29, 0x8f, 0xc, 0xe2, 0x8c, 0x7c, 0x1e, 0xbe, 0x90, 0xf3, 0x45, 0x15, 0xb7, 0xe1, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}
	for i, exp := range expected {
		data := make([]byte, 50)
		sm := SplitMix64(fmix64(uint64(11111 + i)))
		sm.XORKeyStream(data[:i], data[:i])
		assert.Equal(t, exp, data)
		assert.Equal(t, byte(0), data[i])
	}
}

func TestSplitMix64_XORKeyStream_Long(t *testing.T) {
	expected := [...][]byte{
		{0x80, 0x77, 0x22, 0x79, 0x61, 0x13, 0xb9, 0xd4, 0x10, 0x33, 0x49, 0x78, 0xfa, 0x63, 0x93, 0x5b, 0xee, 0xc7, 0x8f, 0xe6, 0x74, 0xe8, 0x15, 0x79, 0x70, 0xe2, 0x43, 0x7d, 0x5e, 0x6f, 0x2d, 0xc4, 0x75, 0xaf, 0x21, 0x81, 0x46, 0xf7, 0x75, 0x68, 0x70, 0x8d, 0xe0, 0xa1, 0x34, 0xc5, 0xa, 0x62, 0xf7, 0x59, 0xd2, 0xff, 0x2f, 0x78, 0x99, 0x2f, 0x65, 0x15, 0x25, 0x38, 0x56, 0xd1, 0xcd, 0x9f, 0xa0, 0xf8, 0xdf, 0xf0, 0x98, 0xf8, 0x8e, 0x72, 0x97, 0xa4, 0x3c, 0x67, 0xfb, 0xba, 0x50, 0x66, 0xb2, 0xc7, 0xc, 0x94, 0x7b, 0xe5, 0xfc, 0x65, 0xa9, 0x5c, 0x8f, 0xc6, 0x72, 0x54, 0x3, 0x6d, 0xfe, 0x79, 0xbe, 0x98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xc8, 0x2e, 0x87, 0x3e, 0x5c, 0x27, 0x7f, 0x1d, 0x26, 0xb5, 0x50, 0x28, 0x7d, 0x10, 0xe3, 0x6, 0x1e, 0x76, 0xdf, 0x90, 0x45, 0xae, 0x92, 0x7a, 0xf2, 0xfd, 0x66, 0x99, 0xa, 0x2, 0x6a, 0x6, 0x99, 0x77, 0x6d, 0x4d, 0xee, 0xaf, 0xe0, 0x21, 0xa1, 0x1a, 0xad, 0x78, 0x3c, 0xeb, 0xc9, 0x52, 0x6e, 0x2a, 0xd0, 0x85, 0x91, 0xaf, 0x96, 0xaf, 0xc7, 0xf2, 0x5a, 0x48, 0x2e, 0x3c, 0x7d, 0xb6, 0xd9, 0xb9, 0xd, 0xaf, 0x71, 0x84, 0x9f, 0x5b, 0xb2, 0xef, 0x94, 0x66, 0xef, 0x11, 0x59, 0x93, 0x7c, 0x4e, 0x50, 0xb, 0x2, 0x24, 0x56, 0xbb, 0xed, 0xe9, 0x3f, 0x71, 0xc6, 0xa9, 0xf, 0x35, 0xc7, 0xe2, 0xb4, 0x8d, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		{0xdf, 0xa8, 0x30, 0x92, 0x68, 0xb7, 0xc7, 0x6a, 0x31, 0x7e, 0xb3, 0x1f, 0x69, 0xe, 0x1f, 0x8c, 0x74, 0xbb, 0x3, 0xaf, 0x86, 0xa6, 0xef, 0x78, 0x0, 0x9c, 0xec, 0xcb, 0xd3, 0xb8, 0x8, 0xa6, 0xa9, 0x55, 0x4d, 0x3c, 0x7b, 0x51, 0xa2, 0xa1, 0xa, 0x63, 0xec, 0x7d, 0xad, 0x1d, 0x61, 0x22, 0x1d, 0xe4, 0xbe, 0x43, 0x15, 0xe5, 0xc9, 0xc3, 0x8a, 0x23, 0x5e, 0x57, 0x53, 0x6a, 0x1b, 0x3, 0x66, 0x70, 0x16, 0x31, 0xfb, 0x3f, 0xe7, 0x55, 0x80, 0xe5, 0x76, 0x75, 0x64, 0x59, 0x13, 0x8c, 0x52, 0xd9, 0xa8, 0xb7, 0x9f, 0x49, 0xaf, 0x2, 0xde, 0xf0, 0x5e, 0xc4, 0x7b, 0x46, 0xe1, 0xf, 0xe8, 0x8a, 0x14, 0x5f, 0xb8, 0xba, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}
	for i, exp := range expected {
		data := make([]byte, 120)
		sm := SplitMix64(fmix64(uint64(11111 + i)))
		sm.XORKeyStream(data[:100+i], data[:100+i])
		assert.Equal(t, exp, data)
		assert.Equal(t, byte(0), data[100+i])
	}
}

func BenchmarkSplitMix64_XORKeyStream(b *testing.B) {
	data := make([]byte, 1024*1024*512)
	_, _ = rand.Read(data)
	sm := SplitMix64(rand.Uint64())
	b.SetBytes(1)
	b.ResetTimer()

	for remain := b.N; remain > 0; remain -= len(data) {
		n := remain
		if n > len(data) {
			n = len(data)
		}
		sm.XORKeyStream(data[:n], data[:n])
	}
}

/*
// slow
BenchmarkSplitMix64_XORKeyStream-4   	944828324	         1.30 ns/op
// unsafe uint64
BenchmarkSplitMix64_XORKeyStream-4   	1000000000	         0.359 ns/op
// []uint64 no bound check
BenchmarkSplitMix64_XORKeyStream-4   	1000000000	         0.343 ns/op
// ptr no bounds check
BenchmarkSplitMix64_XORKeyStream-4   	1000000000	         0.331 ns/op
// asm
BenchmarkSplitMix64_XORKeyStream-4   	1000000000	         0.292 ns/op	3424.46 MB/s
// asm unroll factor 2
BenchmarkSplitMix64_XORKeyStream-4   	1000000000	         0.230 ns/op	4347.58 MB/s
*/
