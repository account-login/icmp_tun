// +build !noasm
// Generated by PeachPy 0.2.0 from splitmix64_lu_amd64.py


// func sm64xorLU(s uint64, dst *uint8, src *uint8, n int64) uint64
TEXT Â·sm64xorLU(SB),4,$0-40
	MOVQ s+0(FP), AX
	MOVQ src+16(FP), CX
	MOVQ dst+8(FP), DX
	MOVQ n+24(FP), DI
	MOVQ $11400714819323198485, SI
	MOVQ $13787848793156543929, BP
	MOVQ $10723151780598845931, R8
	MOVQ $15755400384260043839, R9
	SUBQ $32, DI
	JLT vector_loop_end
vector_loop_begin:
		LEAQ 0(AX)(SI*1), R10
		LEAQ 0(AX)(SI*2), R11
		LEAQ 0(AX)(R9*1), R12
		LEAQ 0(AX)(SI*4), R13
		LEAQ 0(AX)(SI*4), AX
		MOVQ R10, BX
		SHRQ $30, BX
		XORQ BX, R10
		MOVQ R11, BX
		SHRQ $30, BX
		XORQ BX, R11
		MOVQ R12, BX
		SHRQ $30, BX
		XORQ BX, R12
		MOVQ R13, BX
		SHRQ $30, BX
		XORQ BX, R13
		IMULQ BP, R10
		IMULQ BP, R11
		IMULQ BP, R12
		IMULQ BP, R13
		MOVQ R10, BX
		SHRQ $27, BX
		XORQ BX, R10
		MOVQ R11, BX
		SHRQ $27, BX
		XORQ BX, R11
		MOVQ R12, BX
		SHRQ $27, BX
		XORQ BX, R12
		MOVQ R13, BX
		SHRQ $27, BX
		XORQ BX, R13
		IMULQ R8, R10
		IMULQ R8, R11
		IMULQ R8, R12
		IMULQ R8, R13
		MOVQ R10, BX
		SHRQ $31, BX
		XORQ BX, R10
		MOVQ R11, BX
		SHRQ $31, BX
		XORQ BX, R11
		MOVQ R12, BX
		SHRQ $31, BX
		XORQ BX, R12
		MOVQ R13, BX
		SHRQ $31, BX
		XORQ BX, R13
		MOVQ 0(CX), BX
		XORQ R10, BX
		MOVQ BX, 0(DX)
		MOVQ 8(CX), BX
		XORQ R11, BX
		MOVQ BX, 8(DX)
		MOVQ 16(CX), BX
		XORQ R12, BX
		MOVQ BX, 16(DX)
		MOVQ 24(CX), BX
		XORQ R13, BX
		MOVQ BX, 24(DX)
		ADDQ $32, CX
		ADDQ $32, DX
		SUBQ $32, DI
		JGE vector_loop_begin
vector_loop_end:
	ADDQ $32, DI
qw_loop_begin:
		CMPQ DI, $8
		JLT qw_loop_end
		LEAQ 0(AX)(SI*1), R10
		LEAQ 0(AX)(SI*1), AX
		MOVQ R10, BX
		SHRQ $30, BX
		XORQ BX, R10
		IMULQ BP, R10
		MOVQ R10, BX
		SHRQ $27, BX
		XORQ BX, R10
		IMULQ R8, R10
		MOVQ R10, BX
		SHRQ $31, BX
		XORQ BX, R10
		MOVQ 0(CX), BX
		XORQ R10, BX
		MOVQ BX, 0(DX)
		ADDQ $8, CX
		ADDQ $8, DX
		SUBQ $8, DI
		JMP qw_loop_begin
qw_loop_end:
	TESTQ DI, DI
	JEQ scalar_loop_end
	LEAQ 0(AX)(SI*1), R10
	LEAQ 0(AX)(SI*1), AX
	MOVQ R10, SI
	SHRQ $30, SI
	XORQ SI, R10
	IMULQ BP, R10
	MOVQ R10, SI
	SHRQ $27, SI
	XORQ SI, R10
	IMULQ R8, R10
	MOVQ R10, SI
	SHRQ $31, SI
	XORQ SI, R10
scalar_loop_begin:
		MOVB 0(CX), BX
		XORQ R10, BX
		MOVB BX, 0(DX)
		SHRQ $8, R10
		ADDQ $1, CX
		ADDQ $1, DX
		SUBQ $1, DI
		JNE scalar_loop_begin
scalar_loop_end:
	MOVQ AX, ret+32(FP)
	RET
