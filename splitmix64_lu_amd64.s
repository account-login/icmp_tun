// +build !noasm
// Generated by PeachPy 0.2.0 from splitmix64_lu_amd64.py


// func sm64xorLU(s uint64, dst *uint8, src *uint8, n int64) uint64
TEXT Â·sm64xorLU(SB),4,$0-40
	MOVQ s+0(FP), AX
	MOVQ src+16(FP), CX
	MOVQ dst+8(FP), DX
	MOVQ n+24(FP), DI
	MOVQ $11400714819323198485, SI
	MOVQ $13787848793156543929, BP
	MOVQ $10723151780598845931, R8
vector_loop_begin:
		MOVQ AX, R9
		ADDQ SI, AX
		MOVQ AX, R10
		ADDQ SI, AX
		MOVQ R9, R11
		SHRQ $30, R11
		XORQ R11, R9
		MOVQ R10, R11
		SHRQ $30, R11
		XORQ R11, R10
		IMULQ BP, R9
		IMULQ BP, R10
		MOVQ R9, R11
		SHRQ $27, R11
		XORQ R11, R9
		MOVQ R10, R11
		SHRQ $27, R11
		XORQ R11, R10
		IMULQ R8, R9
		IMULQ R8, R10
		MOVQ R9, R11
		SHRQ $31, R11
		XORQ R11, R9
		MOVQ R10, R11
		SHRQ $31, R11
		XORQ R11, R10
		SUBQ $16, DI
		JCS vector_loop_end
		MOVQ 0(CX), BX
		XORQ R9, BX
		MOVQ BX, 0(DX)
		MOVQ 8(CX), R9
		XORQ R10, R9
		MOVQ R9, 8(DX)
		ADDQ $16, CX
		ADDQ $16, DX
		JMP vector_loop_begin
vector_loop_end:
	ADDQ $16, DI
	JEQ scalar_loop_end
		CMPQ DI, $8
		JLE b8_end
		MOVQ 0(CX), BX
		XORQ R9, BX
		MOVQ BX, 0(DX)
		MOVQ R10, R9
		ADDQ $8, CX
		ADDQ $8, DX
		SUBQ $8, DI
b8_end:
scalar_loop_begin:
		MOVB 0(CX), BX
		XORQ R9, BX
		MOVB BX, 0(DX)
		SHRQ $8, R9
		ADDQ $1, CX
		ADDQ $1, DX
		SUBQ $1, DI
		JNE scalar_loop_begin
scalar_loop_end:
	MOVQ AX, ret+32(FP)
	RET
